Cloning the git to locals:
  -->> git clone <Enter your: https/ssh>

1.Showing the branches:
  -->> git branch

2.Switcing branch to another:
  -->> git switch <branch-name>
  -->> git checkout <branch-name>

3.Shows any stages like modified files you can unstage this also and branch (means any changes in code):
  -->> git status

4.Add the modified file:
  -->> git add <file-name>

5.Add the commit message:
  -->> git commit -m '<message>'

6.Sending the files local to repository:
  -->> git push

7.Adding multiple files:
  -->> git add <file-name> <another-file> etc..

8.Adds the All Changes in the repository:
  -->> git add -A

9.Add all changes except a specific file or a folder:
  -->> git add . -- :!README.md
  -->> git add . -- :!excluded-folder/
  -->> git add *

10.Add files matching a pattern (e.g., all .txt files):
  -->> git add *.txt
  -->> git add folder/*.java

11.Add all changes in the current directory:
  -->> git add.

12.Setting Upstream Branch: This links your local branch to the remote branch, allowing you to use git pull without specifying the remote and branch every time:
  -->> git branch --set-upstream origin Dheeraj-branch

13.Sends the local when repository changes:
  -->> git pull

14. Saves local changes temporarily like bin and reverts the working directory to match the HEAD commit.
  -->> git stash save '29th july'

15.Applies the stashed changes back to the working directory for commiting.
  -->> git stash apply stash@{0}

16.Discard/revert changes in the file
  -->> git restore <file-name>

17.Commited mistakenly revert the changes on local:
  -->> git reset --hard HEAD^

18.creates a new directory called .git in the current directory. 
  -->> git init

19.Retriving the all stashed list shows the all stashed:
  -->> git stash list 

20.Creating branch on local and switching:
  -->> git checkout -b <branch-name>
  -->> git switch -c <branch-name>
  [Make sure you to make the new pull request to merge the branch to the default one]
